{
	// Place your snippets for verilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

		
	"always no reset en": {
		"prefix": "always",
		"body": [
			"logic $1;",
			"",
			"always @(posedge clk) if ($2) $1 <= $3;"
		],
		"description": "Enabled always block with enable"
	},

	"always no reset wo en": {
		"prefix": "always",
		"body": [
			"logic $1;",
			"",
			"always @(posedge clk) $1 <= $2;"
		],
		"description": "Enabled always block without enable"
	},

	"always async reset w en": {
		"prefix": "always",
		"body": [
			"logic $1;",
			"",
			"always @(posedge clk or negedge reset_n) if (!reset_n) $1 <= 0; else if ($2) $1 <= $3;"
		
		],
		"description": "Asynchronous always block with enabled"
	},
	
	"always async reset wo en": {
		"prefix": "always",
		"body": [
			"logic $1;",
			"",
			"always @(posedge clk or negedge reset_n) if (!reset_n) $1 <= 0; else $1 <= $2;"
		
		],
		"description": "Asynchronous Reset wo Enabled always block"
	},
	
	"fsm": {
		"prefix": "fsm",
		"body": [
			"localparam IDLE = 5'b1_0_10_0;",
			"localparam RUN  = 5'b1_1_01_0;",
			"localparam END  = 5'b0_1_00_0;",
			"",
			"logic en0, en1, en2;",
			"logic [4:0]   state, state_nxt;",
			"",
			"always @(posedge clk or negedge reset_n)",
			"  if (!reset_n) state <= IDLE;",
			"  else          state <= state_nxt;",
			"",
			"always @*",
			"  case({state, en0, en1, en2})",
			"    {IDLE, 3'b1??} : state_nxt = RUN;",
			"    {RUN, 3'b?1?} : state_nxt  = END;",
			"    {RUN, 3'b??1} : state_nxt  = IDLE;",
			"    default       state_nxt = state;",
			"  endcase"
		],
		"description": "Synchronous Moore State Machine"
	},

	"header": {
		"prefix": "header",
		"body": [
			"// Copyright (c) 2020 by Eridan",
			"//",
			"// File:        ${1:default}.sv",
			"// Author:      v-dalome",
			"//",
			"// Description: ${3:default}",
			"// ",
			"//-----------------------------------------------------------------------------",
			"// Modification history :",
			"// $DateTime:   $",
			"// $Author:     $",
			"// $Change:     $",
			"// $Revision:   $",
			"//-----------------------------------------------------------------------------"
		],
		"description": "Boilerplate Header Template"
	},

	"module": {
		"prefix": "module",
		"body": [
			
			"`include \"defines.v\"",
			"",
			"module $1(",
			"               input            clk,",
			"               input            reset_n",
			");",
			"",
			"endmodule"
		],
		"description": "Boilerplate module Template"
	},

	"repeat": {
		"prefix": "repeat",
		"body": [
			
			"repeat ($1) @(posedge clk);"
		],
		"description": "Boilerplate module Template"
	}
}